rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own data.
    // Artist profiles are public readable.
    match /users/{userId} {
      allow read: if resource.data.role == 'artist' || request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }

    // Events are public readable.
    // Artists can create/update events. Admins can update.
    match /events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artist';
      allow update: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artist' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Movies are public readable.
    // Admins can create/update/delete movies.
    match /movies/{movieId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Authenticated users can manage their own tickets.
    match /tickets/{ticketId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }

    // Users can manage their own subscriptions.
    match /subscriptions/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Admins can read all verification requests. Artists can create their own.
     match /verificationRequests/{requestId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth != null && request.auth.uid == request.resource.data.artistId;
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}