rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to check user roles by reading from the users collection
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(userId)).data.role == 'user';
    }

    function isArtist(userId) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(userId)).data.role == 'artist';
    }

    function isAdmin(userId) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read any user's profile (for artist lists, etc.)
      allow read: if isAuthenticated();
      // Only the user themselves can write to their own document
      allow write: if request.auth.uid == userId;
    }

    // Rules for the 'events' collection
    match /events/{eventId} {
      // Anyone can read event details
      allow read: if true;
      // Only admins or the artist who owns the event can create/update it
      allow write: if isAdmin(request.auth.uid) || (isArtist(request.auth.uid) && request.auth.uid == request.resource.data.artistId);
    }

    // Rules for the 'tickets' collection
    match /tickets/{ticketId} {
      // A user can only create or read their own tickets
      allow read, create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // Rules for the 'movies' collection
    match /movies/{movieId} {
      // Anyone can read movie details
      allow read: if true;
      // Only admins can write movie data
      allow write: if isAdmin(request.auth.uid);
    }
    
    // Rules for the 'verificationRequests' collection
    match /verificationRequests/{reqId} {
        // Only admins can read or write verification requests
        allow read, write: if isAdmin(request.auth.uid);
        // Artists can create their own verification requests
        allow create: if isArtist(request.auth.uid) && request.auth.uid == request.resource.data.artistId;
    }

    // Rules for the 'subscriptions' collection
    match /subscriptions/{userId} {
      // A user can only read or write their own subscription
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
