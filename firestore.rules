
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can view user/artist profiles
      allow get: if true;
      // Any authenticated user can list users (needed for artist list)
      allow list: if true;
      // Only the owner or an admin can update a profile
      allow update: if isOwner(userId) || isAdmin();
      // Only an admin can create or delete users (registration is handled by a different flow)
      allow create, delete: if isAdmin();
    }
    
    // Rules for the 'events' collection
    match /events/{eventId} {
      // Anyone can view events
      allow read: if true;
      // Only an authenticated artist can create an event
      allow create: if isAuthenticated() && request.resource.data.artistId == request.auth.uid;
      // Only the artist who owns the event or an admin can update it
      allow update: if (isAuthenticated() && resource.data.artistId == request.auth.uid) || isAdmin();
      // Only an admin can delete an event
      allow delete: if isAdmin();
    }
    
    // Rules for the 'movies' collection
    match /movies/{movieId} {
      // Anyone can view movies
      allow read: if true;
      // Only an admin can create, update, or delete movies
      allow write: if isAdmin();
    }

    // Rules for the 'tickets' collection
    match /tickets/{ticketId} {
      // Users can only read their own tickets
      allow read: if isOwner(resource.data.userId);
       // Authenticated users can create their own tickets
      allow create: if isOwner(request.resource.data.userId);
      // Tickets cannot be updated or deleted by users
      allow update, delete: if false;
    }

    // Rules for 'verificationRequests'
    match /verificationRequests/{requestId} {
      // Only admins can read verification requests
      allow read: if isAdmin();
      // Only the artist making the request can create it
      allow create: if isOwner(request.resource.data.artistId);
      // Only admins can update (approve/reject) them
      allow update: if isAdmin();
      // Deletion is not allowed
      allow delete: if false;
    }
    
    // Rules for the 'appStatus' document (if you have one)
    match /config/appStatus {
        // Anyone can read the app status
        allow get: if true;
        // Only admins can update the status
        allow write: if isAdmin();
    }
  }
}
