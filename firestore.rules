
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // USERS: Publicly readable, but only the user can write to their own document.
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // EVENTS: Publicly readable. Only authenticated users (artists) can create.
    // Only the original artist or an admin can update.
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.artistId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow delete: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // MOVIES: Publicly readable. Only admins can write.
    match /movies/{movieId} {
        allow read: if true;
        allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // TICKETS: Can only be created by authenticated users.
    // Users can only read their own tickets.
    match /tickets/{ticketId} {
      allow create: if isAuthenticated();
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // VERIFICATION REQUESTS: Only readable and writable by admins.
    match /verificationRequests/{requestId} {
        allow read, write, create: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
