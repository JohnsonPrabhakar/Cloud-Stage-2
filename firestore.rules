rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users can only be read if they are an artist.
    // Any user can update their OWN document. No one else can.
    match /users/{userId} {
      allow read: if resource.data.role == 'artist' || request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    
    // Events can be read by anyone.
    // Only authenticated artists can create/update events.
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artist';
    }

    // Tickets can only be created and read by the user who owns them.
    match /tickets/{ticketId} {
      allow read, create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // Movies can be read by anyone.
    // Only admins can write movies.
    match /movies/{movieId} {
      allow read: if true;
      allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Subscriptions can only be read or written by the user who owns them.
    match /subscriptions/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Verification requests can only be read/written by admins.
    // Artists can create them.
    match /verificationRequests/{requestId} {
      allow read, update, delete: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artist';
    }
  }
}
