
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    function isArtist() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'artist';
    }

    // Rules for collections

    match /users/{userId} {
      // Allow anyone to read user profiles (for artist lists, etc.)
      allow read: if true;
      // Only the user themselves or an admin can update a profile
      allow write: if isOwner(userId) || isAdmin();
    }

    match /events/{eventId} {
      // Allow anyone to read event data
      allow read: if true;
      // Only allow artists or admins to create/update events
      allow create, update: if isArtist() || isAdmin();
      // Only allow admins to delete events
      allow delete: if isAdmin();
    }
    
    match /movies/{movieId} {
      // Allow anyone to read movie data
      allow read: if true;
      // Only admins can create/update/delete movies
      allow write: if isAdmin();
    }
    
    match /verificationRequests/{requestId} {
      // Only the artist who created it or an admin can read
      allow read: if isOwner(resource.data.artistId) || isAdmin();
      // Only the artist can create it
      allow create: if isOwner(request.resource.data.artistId);
      // Only an admin can update it (approve/reject)
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /tickets/{ticketId} {
      // A user can only access their own tickets
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      // A user can only create a ticket for themselves
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // Tickets cannot be updated or deleted by users
      allow update, delete: if false;
    }
    
    // Default deny all other collections/paths
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
