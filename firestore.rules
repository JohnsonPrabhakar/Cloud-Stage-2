rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }

    function isArtist() {
      return isAuthenticated() && getUserRole() == 'artist';
    }
    
    // --- Collection Rules ---

    // Events are public to read, but only artists/admins can write.
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isArtist() && request.resource.data.artistId == request.auth.uid;
      allow update: if isAdmin() || (isArtist() && resource.data.artistId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Movies are public to read, but only admins can write.
    match /movies/{movieId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }

    // User profiles are public to read. Users can only edit their own profile.
    match /users/{userId} {
      allow get, list: if true;
      // Anyone can create a user account (register)
      allow create: if true; 
      // Only the owner can update their own profile, or an admin.
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Tickets can only be created by authenticated users, and read by the owner or an admin.
    match /tickets/{ticketId} {
      allow create: if isAuthenticated();
      allow read: if isOwner(request.resource.data.userId) || isAdmin();
      allow write, delete: if isAdmin();
    }
    
    // Verification requests can be created by artists, but only read/written by admins.
    match /verificationRequests/{requestId} {
      allow create: if isArtist();
      allow read, write, delete: if isAdmin();
    }
  }
}
