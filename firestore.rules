
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles from the users collection
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isRole(userId, role) {
      return request.auth != null && getUserData(userId).role == role;
    }

    function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
        return isRole(request.auth.uid, 'admin');
    }

    function isArtist() {
        return isRole(request.auth.uid, 'artist');
    }

    // --- COLLECTION RULES ---

    // Users can be read by anyone, but only modified by themselves or an admin.
    match /users/{userId} {
      allow list, read: if true; 
      allow create: if request.auth != null;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Events can be read by anyone, but only created/updated by their owner artist or an admin.
    match /events/{eventId} {
      allow read: if true;
      allow create: if isArtist();
      allow update: if (isArtist() && resource.data.artistId == request.auth.uid) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Movies can be read by anyone, but only managed by admins.
    match /movies/{movieId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    // A user can only access their own tickets.
    match /tickets/{ticketId} {
        allow read, create: if isOwner(request.resource.data.userId);
        allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Verification requests can only be managed by admins.
    match /verificationRequests/{requestId} {
      allow read, list, create, update, delete: if isAdmin();
    }
  }
}
